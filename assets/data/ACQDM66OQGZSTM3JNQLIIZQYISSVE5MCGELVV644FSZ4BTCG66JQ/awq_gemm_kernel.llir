; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @awq_gemm_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !10
  %13 = add i32 %6, 31, !dbg !11
  %14 = sdiv i32 %13, 32, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %15 = sdiv i32 %11, %.frozen, !dbg !16
  %16 = mul i32 %15, %.frozen, !dbg !17
  %.decomposed = sub i32 %11, %16, !dbg !17
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !18
  %18 = and i32 %17, 3, !dbg !18
  %19 = shl i32 %15, 5, !dbg !19
  %20 = and i32 %17, 4, !dbg !20
  %.lobit = lshr exact i32 %20, 2, !dbg !20
  %21 = and i32 %17, 8, !dbg !20
  %22 = and i32 %17, 16, !dbg !20
  %23 = lshr exact i32 %22, 2, !dbg !20
  %24 = lshr i32 %17, 2, !dbg !20
  %25 = and i32 %24, 8, !dbg !20
  %26 = lshr i32 %17, 2, !dbg !20
  %27 = and i32 %26, 18, !dbg !20
  %28 = or disjoint i32 %27, %.lobit, !dbg !20
  %29 = or disjoint i32 %28, %23, !dbg !20
  %30 = or disjoint i32 %29, %25, !dbg !20
  %31 = shl i32 %17, 3, !dbg !20
  %32 = and i32 %31, 24, !dbg !20
  %33 = or disjoint i32 %19, %30, !dbg !21
  %34 = icmp slt i32 %33, %5, !dbg !22
  %35 = shl nsw i32 %.decomposed, 2, !dbg !23
  %36 = or disjoint i32 %35, %18, !dbg !24
  %37 = sdiv i32 %6, 8, !dbg !25
  %38 = icmp slt i32 %36, %37, !dbg !26
  %39 = shl nsw i32 %.decomposed, 5, !dbg !27
  %40 = or disjoint i32 %39, %32, !dbg !28
  %41 = icmp slt i32 %40, %6, !dbg !29
  %42 = shl i32 %12, 5, !dbg !30
  %43 = or disjoint i32 %32, %42, !dbg !31
  %44 = or disjoint i32 %30, %42, !dbg !31
  %45 = mul i32 %33, %7, !dbg !32
  %46 = add i32 %45, %43, !dbg !33
  %47 = mul i32 %37, %44, !dbg !34
  %48 = add i32 %36, %47, !dbg !35
  %49 = sext i32 %46 to i64, !dbg !36
  %50 = getelementptr half, ptr addrspace(1) %0, i64 %49, !dbg !36
  %51 = sext i32 %48 to i64, !dbg !37
  %52 = getelementptr i32, ptr addrspace(1) %1, i64 %51, !dbg !37
  %53 = add i32 %7, 255, !dbg !38
  %54 = sdiv i32 %53, 256, !dbg !40
  %55 = shl i32 %37, 8, !dbg !41
  %56 = icmp sgt i32 %53, 255, !dbg !42
  %57 = icmp slt i32 %43, %7, !dbg !43
  %58 = icmp slt i32 %44, %7, !dbg !43
  %59 = and i1 %57, %34, !dbg !44
  %60 = and i1 %56, %59, !dbg !42
  %61 = xor i32 %32, %22, !dbg !45
  %62 = shl nuw nsw i32 %30, 5, !dbg !45
  %63 = or disjoint i32 %62, %61, !dbg !45
  %64 = zext nneg i32 %63 to i64, !dbg !45
  %65 = getelementptr half, ptr addrspace(3) @global_smem, i64 %64, !dbg !45
  %66 = select i1 %60, i32 16, i32 0, !dbg !45
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %65, ptr addrspace(1) %50, i32 %66) #1, !dbg !45
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !45
  %67 = and i1 %58, %38, !dbg !46
  %68 = and i1 %56, %67, !dbg !42
  %69 = shl nuw nsw i32 %30, 2, !dbg !47
  %70 = or disjoint i32 %69, %18, !dbg !47
  %71 = zext nneg i32 %70 to i64, !dbg !47
  %72 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %71, !dbg !47
  %73 = select i1 %68, i32 4, i32 0, !dbg !47
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %72, ptr addrspace(1) %52, i32 %73) #1, !dbg !47
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !47
  %74 = sdiv i32 %42, %8, !dbg !48
  %75 = mul i32 %74, %37, !dbg !49
  %76 = add i32 %75, %36, !dbg !50
  %77 = sdiv i32 %7, %8, !dbg !51
  %78 = icmp slt i32 %74, %77, !dbg !52
  %79 = and i1 %38, %78, !dbg !53
  %80 = sext i32 %76 to i64, !dbg !54
  %81 = getelementptr i32, ptr addrspace(1) %3, i64 %80, !dbg !54
  %82 = and i1 %56, %79, !dbg !42
  %83 = zext nneg i32 %18 to i64, !dbg !55
  %84 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 7296), i64 %83, !dbg !55
  %85 = and i32 %17, 124, !dbg !55
  %86 = icmp eq i32 %85, 0, !dbg !55
  %87 = select i1 %82, i32 4, i32 0, !dbg !55
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %84, ptr addrspace(1) %81, i32 %87, i1 %86) #1, !dbg !55
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !55
  %88 = mul i32 %74, %6, !dbg !56
  %89 = add i32 %88, %40, !dbg !57
  %90 = and i1 %41, %78, !dbg !58
  %91 = sext i32 %89 to i64, !dbg !59
  %92 = getelementptr half, ptr addrspace(1) %4, i64 %91, !dbg !59
  %93 = and i1 %56, %90, !dbg !42
  %94 = zext nneg i32 %32 to i64, !dbg !60
  %95 = getelementptr half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 7168), i64 %94, !dbg !60
  %96 = select i1 %93, i32 16, i32 0, !dbg !60
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %92, i32 %96, i1 %86) #1, !dbg !60
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !60
  %97 = icmp sgt i32 %53, 511, !dbg !42
  %98 = add i32 %43, 256, !dbg !61
  %99 = add i32 %44, 256, !dbg !61
  %100 = getelementptr i8, ptr addrspace(1) %50, i64 512, !dbg !62
  %101 = sext i32 %55 to i64, !dbg !63
  %102 = getelementptr i32, ptr addrspace(1) %52, i64 %101, !dbg !63
  %103 = icmp slt i32 %98, %7, !dbg !43
  %104 = icmp slt i32 %99, %7, !dbg !43
  %105 = and i1 %103, %34, !dbg !44
  %106 = and i1 %97, %105, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %107 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %64, !dbg !45
  %108 = select i1 %106, i32 16, i32 0, !dbg !45
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %107, ptr addrspace(1) %100, i32 %108) #1, !dbg !45
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !45
  %109 = and i1 %104, %38, !dbg !46
  %110 = and i1 %97, %109, !dbg !42
  %111 = getelementptr inbounds nuw i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6656), i64 %71, !dbg !47
  %112 = select i1 %110, i32 4, i32 0, !dbg !47
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %111, ptr addrspace(1) %102, i32 %112) #1, !dbg !47
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !47
  %113 = add i32 %42, 256, !dbg !64
  %114 = sdiv i32 %113, %8, !dbg !48
  %115 = mul i32 %114, %37, !dbg !49
  %116 = add i32 %115, %36, !dbg !50
  %117 = icmp slt i32 %114, %77, !dbg !52
  %118 = and i1 %38, %117, !dbg !53
  %119 = sext i32 %116 to i64, !dbg !54
  %120 = getelementptr i32, ptr addrspace(1) %3, i64 %119, !dbg !54
  %121 = and i1 %97, %118, !dbg !42
  %122 = getelementptr inbounds nuw i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 7312), i64 %83, !dbg !55
  %123 = select i1 %121, i32 4, i32 0, !dbg !55
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %122, ptr addrspace(1) %120, i32 %123, i1 %86) #1, !dbg !55
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !55
  %124 = mul i32 %114, %6, !dbg !56
  %125 = add i32 %124, %40, !dbg !57
  %126 = and i1 %41, %117, !dbg !58
  %127 = sext i32 %125 to i64, !dbg !59
  %128 = getelementptr half, ptr addrspace(1) %4, i64 %127, !dbg !59
  %129 = and i1 %97, %126, !dbg !42
  %130 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 7232), i64 %94, !dbg !60
  %131 = select i1 %129, i32 16, i32 0, !dbg !60
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %130, ptr addrspace(1) %128, i32 %131, i1 %86) #1, !dbg !60
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !60
  br i1 %56, label %.lr.ph, label %._crit_edge, !dbg !42

.lr.ph:                                           ; preds = %10
  %132 = and i32 %31, 16, !dbg !20
  %133 = and i32 %31, 8, !dbg !20
  %134 = lshr exact i32 %21, 2, !dbg !20
  %invariant.op = or disjoint i32 %23, %32, !dbg !42
  %135 = add nsw i32 %54, -2
  %136 = shl i32 %17, 2
  %137 = and i32 %136, 12
  %138 = or disjoint i32 %137, %22
  %139 = shl nuw nsw i32 %29, 5
  %140 = or disjoint i32 %139, %138
  %141 = zext nneg i32 %140 to i64
  %142 = or disjoint i32 %139, 256
  %143 = or disjoint i32 %142, %138
  %144 = zext nneg i32 %143 to i64
  %145 = or disjoint i32 %137, 16
  %146 = xor i32 %145, %22
  %147 = or disjoint i32 %139, %146
  %148 = zext nneg i32 %147 to i64
  %149 = or disjoint i32 %142, %146
  %150 = zext nneg i32 %149 to i64
  %151 = lshr i32 %17, 1
  %152 = xor i32 %31, %151
  %153 = and i32 %152, 24
  %154 = or disjoint i32 %62, %153
  %155 = zext nneg i32 %154 to i64
  %156 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %155
  %157 = or disjoint i32 %.lobit, %invariant.op
  %.reass = or disjoint i32 %157, %134
  %158 = xor i32 %.reass, %25
  %159 = shl nuw nsw i32 %137, 5
  %160 = or disjoint i32 %158, %159
  %161 = zext nneg i32 %160 to i64
  %162 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %161
  %163 = or disjoint i32 %159, 32
  %164 = or disjoint i32 %158, %163
  %165 = zext nneg i32 %164 to i64
  %166 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %165
  %167 = or disjoint i32 %159, 64
  %168 = or disjoint i32 %158, %167
  %169 = zext nneg i32 %168 to i64
  %170 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %169
  %171 = or disjoint i32 %159, 96
  %172 = or disjoint i32 %158, %171
  %173 = zext nneg i32 %172 to i64
  %174 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %173
  %175 = shl nuw nsw i32 %145, 5
  %176 = or disjoint i32 %158, %175
  %177 = zext nneg i32 %176 to i64
  %178 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %177
  %179 = or disjoint i32 %159, 544
  %180 = or disjoint i32 %158, %179
  %181 = zext nneg i32 %180 to i64
  %182 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %181
  %183 = or disjoint i32 %159, 576
  %184 = or disjoint i32 %158, %183
  %185 = zext nneg i32 %184 to i64
  %186 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %185
  %187 = or disjoint i32 %159, 608
  %188 = or disjoint i32 %158, %187
  %189 = zext nneg i32 %188 to i64
  %190 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %189
  %191 = or disjoint i32 %133, 16
  %192 = xor i32 %191, %132
  %193 = or disjoint i32 %.lobit, %192
  %194 = or disjoint i32 %193, %134
  %195 = or disjoint i32 %194, %23
  %196 = xor i32 %195, %25
  %197 = add nuw nsw i32 %196, %159
  %198 = zext nneg i32 %197 to i64
  %199 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %198
  %200 = add nuw nsw i32 %196, %163
  %201 = zext nneg i32 %200 to i64
  %202 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %201
  %203 = add nuw nsw i32 %196, %167
  %204 = zext nneg i32 %203 to i64
  %205 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %204
  %206 = add nuw nsw i32 %196, %171
  %207 = zext nneg i32 %206 to i64
  %208 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %207
  %209 = add nuw nsw i32 %196, %175
  %210 = zext nneg i32 %209 to i64
  %211 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %210
  %212 = add nuw nsw i32 %196, %179
  %213 = zext nneg i32 %212 to i64
  %214 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %213
  %215 = add nuw nsw i32 %196, %183
  %216 = zext nneg i32 %215 to i64
  %217 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %216
  %218 = add nuw nsw i32 %196, %187
  %219 = zext nneg i32 %218 to i64
  %220 = getelementptr inbounds nuw half, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %219
  %221 = add i32 %42, 512
  br label %222, !dbg !42

222:                                              ; preds = %.lr.ph, %222
  %223 = phi i32 [ -1, %.lr.ph ], [ %237, %222 ]
  %224 = phi i32 [ 1, %.lr.ph ], [ %361, %222 ]
  %.pn3676 = phi i32 [ %99, %.lr.ph ], [ %356, %222 ]
  %.pn3475 = phi i32 [ %98, %.lr.ph ], [ %355, %222 ]
  %.pn1874 = phi ptr addrspace(1) [ %100, %.lr.ph ], [ %357, %222 ]
  %.pn373 = phi ptr addrspace(1) [ %102, %.lr.ph ], [ %358, %222 ]
  %225 = phi half [ 0xH0000, %.lr.ph ], [ %347, %222 ]
  %226 = phi half [ 0xH0000, %.lr.ph ], [ %348, %222 ]
  %227 = phi half [ 0xH0000, %.lr.ph ], [ %349, %222 ]
  %228 = phi half [ 0xH0000, %.lr.ph ], [ %350, %222 ]
  %229 = phi half [ 0xH0000, %.lr.ph ], [ %351, %222 ]
  %230 = phi half [ 0xH0000, %.lr.ph ], [ %352, %222 ]
  %231 = phi half [ 0xH0000, %.lr.ph ], [ %353, %222 ]
  %232 = phi half [ 0xH0000, %.lr.ph ], [ %354, %222 ]
  %233 = phi i32 [ 0, %.lr.ph ], [ %396, %222 ]
  %234 = icmp slt i32 %233, %135, !dbg !42
  %235 = add i32 %223, 1, !dbg !42
  %236 = icmp slt i32 %235, 2, !dbg !42
  %237 = select i1 %236, i32 %235, i32 0, !dbg !42
  tail call void @llvm.nvvm.cp.async.wait.group(i32 4), !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %238 = shl i32 %237, 10, !dbg !45
  %239 = sext i32 %238 to i64, !dbg !45
  %240 = getelementptr half, ptr addrspace(3) @global_smem, i64 %239, !dbg !45
  %241 = getelementptr inbounds nuw half, ptr addrspace(3) %240, i64 %141, !dbg !45
  %242 = load <2 x i32>, ptr addrspace(3) %241, align 8, !dbg !45
  %243 = getelementptr inbounds nuw half, ptr addrspace(3) %240, i64 %144, !dbg !45
  %244 = load <2 x i32>, ptr addrspace(3) %243, align 8, !dbg !45
  %245 = getelementptr inbounds nuw half, ptr addrspace(3) %240, i64 %148, !dbg !45
  %246 = load <2 x i32>, ptr addrspace(3) %245, align 8, !dbg !45
  %247 = getelementptr inbounds nuw half, ptr addrspace(3) %240, i64 %150, !dbg !45
  %248 = load <2 x i32>, ptr addrspace(3) %247, align 8, !dbg !45
  %249 = shl i32 %237, 7, !dbg !47
  %250 = sext i32 %249 to i64, !dbg !47
  %gep = getelementptr i32, ptr addrspace(3) %72, i64 %250, !dbg !47
  %251 = load i32, ptr addrspace(3) %gep, align 4, !dbg !47
  %252 = shl i32 %237, 2, !dbg !55
  %253 = sext i32 %252 to i64, !dbg !55
  %gep62 = getelementptr i32, ptr addrspace(3) %84, i64 %253, !dbg !55
  %254 = load i32, ptr addrspace(3) %gep62, align 4, !dbg !55
  %255 = shl i32 %237, 5, !dbg !60
  %256 = sext i32 %255 to i64, !dbg !60
  %gep64 = getelementptr half, ptr addrspace(3) %95, i64 %256, !dbg !60
  %257 = lshr i32 %251, 16, !dbg !65
  %258 = lshr i32 %251, 12, !dbg !65
  %259 = lshr i32 %254, 16, !dbg !66
  %260 = lshr i32 %254, 12, !dbg !66
  %261 = load <8 x half>, ptr addrspace(3) %gep64, align 16, !dbg !60
  %262 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !65
  %263 = shufflevector <2 x i32> %262, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !65
  %264 = lshr <2 x i32> %263, <i32 4, i32 20>, !dbg !65
  %265 = lshr <2 x i32> %263, <i32 8, i32 24>, !dbg !65
  %266 = insertelement <8 x i32> poison, i32 %251, i64 0, !dbg !67
  %267 = insertelement <8 x i32> %266, i32 %257, i64 1, !dbg !67
  %268 = insertelement <8 x i32> %267, i32 %258, i64 6, !dbg !67
  %269 = shufflevector <8 x i32> %268, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 0>, !dbg !67
  %270 = shufflevector <2 x i32> %264, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !67
  %271 = shufflevector <8 x i32> %269, <8 x i32> %270, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 poison, i32 poison, i32 6, i32 7>, !dbg !67
  %272 = shufflevector <2 x i32> %265, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !67
  %273 = shufflevector <8 x i32> %271, <8 x i32> %272, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !67
  %274 = and <8 x i32> %273, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 poison>, !dbg !67
  %275 = lshr <8 x i32> %273, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 28>, !dbg !67
  %276 = shufflevector <8 x i32> %274, <8 x i32> %275, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 15>, !dbg !67
  %277 = insertelement <2 x i32> poison, i32 %254, i64 0, !dbg !66
  %278 = shufflevector <2 x i32> %277, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !66
  %279 = lshr <2 x i32> %278, <i32 4, i32 20>, !dbg !66
  %280 = lshr <2 x i32> %278, <i32 8, i32 24>, !dbg !66
  %281 = insertelement <8 x i32> poison, i32 %254, i64 0, !dbg !68
  %282 = insertelement <8 x i32> %281, i32 %259, i64 1, !dbg !68
  %283 = insertelement <8 x i32> %282, i32 %260, i64 6, !dbg !68
  %284 = shufflevector <8 x i32> %283, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 0>, !dbg !68
  %285 = shufflevector <2 x i32> %279, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !68
  %286 = shufflevector <8 x i32> %284, <8 x i32> %285, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 poison, i32 poison, i32 6, i32 7>, !dbg !68
  %287 = shufflevector <2 x i32> %280, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !68
  %288 = shufflevector <8 x i32> %286, <8 x i32> %287, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 6, i32 7>, !dbg !68
  %289 = and <8 x i32> %288, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 poison>, !dbg !68
  %290 = lshr <8 x i32> %288, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 28>, !dbg !68
  %291 = shufflevector <8 x i32> %289, <8 x i32> %290, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 15>, !dbg !68
  %292 = sub nsw <8 x i32> %276, %291, !dbg !69
  %293 = sitofp <8 x i32> %292 to <8 x half>, !dbg !70
  %294 = fmul <8 x half> %261, %293, !dbg !70
  store <8 x half> %294, ptr addrspace(3) %156, align 16, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %295 = load <1 x half>, ptr addrspace(3) %162, align 2, !dbg !70
  %296 = load <1 x half>, ptr addrspace(3) %166, align 2, !dbg !70
  %297 = load <1 x half>, ptr addrspace(3) %170, align 2, !dbg !70
  %298 = load <1 x half>, ptr addrspace(3) %174, align 2, !dbg !70
  %299 = load <1 x half>, ptr addrspace(3) %178, align 2, !dbg !70
  %300 = load <1 x half>, ptr addrspace(3) %182, align 2, !dbg !70
  %301 = load <1 x half>, ptr addrspace(3) %186, align 2, !dbg !70
  %302 = load <1 x half>, ptr addrspace(3) %190, align 2, !dbg !70
  %303 = load <1 x half>, ptr addrspace(3) %199, align 2, !dbg !70
  %304 = load <1 x half>, ptr addrspace(3) %202, align 2, !dbg !70
  %305 = load <1 x half>, ptr addrspace(3) %205, align 2, !dbg !70
  %306 = load <1 x half>, ptr addrspace(3) %208, align 2, !dbg !70
  %307 = load <1 x half>, ptr addrspace(3) %211, align 2, !dbg !70
  %308 = load <1 x half>, ptr addrspace(3) %214, align 2, !dbg !70
  %309 = load <1 x half>, ptr addrspace(3) %217, align 2, !dbg !70
  %310 = load <1 x half>, ptr addrspace(3) %220, align 2, !dbg !70
  %311 = insertelement <2 x half> poison, half %225, i64 0, !dbg !71
  %312 = insertelement <2 x half> %311, half %226, i64 1, !dbg !71
  %313 = insertelement <2 x half> poison, half %227, i64 0, !dbg !71
  %314 = insertelement <2 x half> %313, half %228, i64 1, !dbg !71
  %315 = insertelement <2 x half> poison, half %229, i64 0, !dbg !71
  %316 = insertelement <2 x half> %315, half %230, i64 1, !dbg !71
  %317 = insertelement <2 x half> poison, half %231, i64 0, !dbg !71
  %318 = insertelement <2 x half> %317, half %232, i64 1, !dbg !71
  %.extract = extractelement <2 x i32> %242, i64 0, !dbg !71
  %.extract48 = extractelement <2 x i32> %244, i64 0, !dbg !71
  %.extract50 = extractelement <2 x i32> %246, i64 0, !dbg !71
  %.extract52 = extractelement <2 x i32> %248, i64 0, !dbg !71
  %.extract54 = extractelement <2 x i32> %242, i64 1, !dbg !71
  %.extract56 = extractelement <2 x i32> %244, i64 1, !dbg !71
  %.extract58 = extractelement <2 x i32> %246, i64 1, !dbg !71
  %.extract60 = extractelement <2 x i32> %248, i64 1, !dbg !71
  %319 = shufflevector <1 x half> %295, <1 x half> %296, <2 x i32> <i32 0, i32 1>, !dbg !71
  %320 = bitcast <2 x half> %319 to i32, !dbg !71
  %321 = shufflevector <1 x half> %299, <1 x half> %300, <2 x i32> <i32 0, i32 1>, !dbg !71
  %322 = bitcast <2 x half> %321 to i32, !dbg !71
  %323 = shufflevector <1 x half> %297, <1 x half> %298, <2 x i32> <i32 0, i32 1>, !dbg !71
  %324 = bitcast <2 x half> %323 to i32, !dbg !71
  %325 = shufflevector <1 x half> %301, <1 x half> %302, <2 x i32> <i32 0, i32 1>, !dbg !71
  %326 = bitcast <2 x half> %325 to i32, !dbg !71
  %327 = shufflevector <1 x half> %303, <1 x half> %304, <2 x i32> <i32 0, i32 1>, !dbg !71
  %328 = bitcast <2 x half> %327 to i32, !dbg !71
  %329 = shufflevector <1 x half> %307, <1 x half> %308, <2 x i32> <i32 0, i32 1>, !dbg !71
  %330 = bitcast <2 x half> %329 to i32, !dbg !71
  %331 = shufflevector <1 x half> %305, <1 x half> %306, <2 x i32> <i32 0, i32 1>, !dbg !71
  %332 = bitcast <2 x half> %331 to i32, !dbg !71
  %333 = shufflevector <1 x half> %309, <1 x half> %310, <2 x i32> <i32 0, i32 1>, !dbg !71
  %334 = bitcast <2 x half> %333 to i32, !dbg !71
  %335 = tail call { <2 x half>, <2 x half> } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { $0, $1 }, { $4, $5, $6, $7 }, { $8, $9 }, { $2, $3 };", "=r,=r,0,1,r,r,r,r,r,r"(<2 x half> %312, <2 x half> %314, i32 %.extract, i32 %.extract48, i32 %.extract50, i32 %.extract52, i32 %320, i32 %322) #1, !dbg !71
  %336 = extractvalue { <2 x half>, <2 x half> } %335, 0, !dbg !71
  %337 = extractvalue { <2 x half>, <2 x half> } %335, 1, !dbg !71
  %338 = tail call { <2 x half>, <2 x half> } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { $0, $1 }, { $4, $5, $6, $7 }, { $8, $9 }, { $2, $3 };", "=r,=r,0,1,r,r,r,r,r,r"(<2 x half> %316, <2 x half> %318, i32 %.extract, i32 %.extract48, i32 %.extract50, i32 %.extract52, i32 %328, i32 %330) #1, !dbg !71
  %339 = extractvalue { <2 x half>, <2 x half> } %338, 0, !dbg !71
  %340 = extractvalue { <2 x half>, <2 x half> } %338, 1, !dbg !71
  %341 = tail call { <2 x half>, <2 x half> } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { $0, $1 }, { $4, $5, $6, $7 }, { $8, $9 }, { $2, $3 };", "=r,=r,0,1,r,r,r,r,r,r"(<2 x half> %336, <2 x half> %337, i32 %.extract54, i32 %.extract56, i32 %.extract58, i32 %.extract60, i32 %324, i32 %326) #1, !dbg !71
  %342 = extractvalue { <2 x half>, <2 x half> } %341, 0, !dbg !71
  %343 = extractvalue { <2 x half>, <2 x half> } %341, 1, !dbg !71
  %344 = tail call { <2 x half>, <2 x half> } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { $0, $1 }, { $4, $5, $6, $7 }, { $8, $9 }, { $2, $3 };", "=r,=r,0,1,r,r,r,r,r,r"(<2 x half> %339, <2 x half> %340, i32 %.extract54, i32 %.extract56, i32 %.extract58, i32 %.extract60, i32 %332, i32 %334) #1, !dbg !71
  %345 = extractvalue { <2 x half>, <2 x half> } %344, 0, !dbg !71
  %346 = extractvalue { <2 x half>, <2 x half> } %344, 1, !dbg !71
  %347 = extractelement <2 x half> %342, i64 0, !dbg !71
  %348 = extractelement <2 x half> %342, i64 1, !dbg !71
  %349 = extractelement <2 x half> %343, i64 0, !dbg !71
  %350 = extractelement <2 x half> %343, i64 1, !dbg !71
  %351 = extractelement <2 x half> %345, i64 0, !dbg !71
  %352 = extractelement <2 x half> %345, i64 1, !dbg !71
  %353 = extractelement <2 x half> %346, i64 0, !dbg !71
  %354 = extractelement <2 x half> %346, i64 1, !dbg !71
  %355 = add i32 %.pn3475, 256, !dbg !61
  %356 = add i32 %.pn3676, 256, !dbg !61
  %357 = getelementptr i8, ptr addrspace(1) %.pn1874, i64 512, !dbg !62
  %358 = getelementptr i32, ptr addrspace(1) %.pn373, i64 %101, !dbg !63
  %359 = add i32 %224, 1, !dbg !42
  %360 = icmp slt i32 %359, 2, !dbg !42
  %361 = select i1 %360, i32 %359, i32 0, !dbg !42
  %362 = icmp slt i32 %355, %7, !dbg !43
  %363 = icmp slt i32 %356, %7, !dbg !43
  %364 = and i1 %34, %362, !dbg !44
  %365 = shl i32 %361, 10, !dbg !45
  %366 = sext i32 %365 to i64, !dbg !45
  %367 = and i1 %234, %364, !dbg !42
  %gep66 = getelementptr half, ptr addrspace(3) %65, i64 %366, !dbg !45
  %368 = select i1 %367, i32 16, i32 0, !dbg !45
  tail call void asm sideeffect "cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r"(ptr addrspace(3) %gep66, ptr addrspace(1) %357, i32 %368) #1, !dbg !45
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !45
  %369 = and i1 %38, %363, !dbg !46
  %370 = shl i32 %361, 7, !dbg !47
  %371 = sext i32 %370 to i64, !dbg !47
  %372 = and i1 %234, %369, !dbg !42
  %gep68 = getelementptr i32, ptr addrspace(3) %72, i64 %371, !dbg !47
  %373 = select i1 %372, i32 4, i32 0, !dbg !47
  tail call void asm sideeffect "cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r"(ptr addrspace(3) %gep68, ptr addrspace(1) %358, i32 %373) #1, !dbg !47
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !47
  %374 = shl i32 %233, 8, !dbg !72
  %375 = add i32 %221, %374, !dbg !64
  %376 = sdiv i32 %375, %8, !dbg !48
  %377 = mul i32 %376, %37, !dbg !49
  %378 = add i32 %377, %36, !dbg !50
  %379 = icmp slt i32 %376, %77, !dbg !52
  %380 = and i1 %38, %379, !dbg !53
  %381 = sext i32 %378 to i64, !dbg !54
  %382 = getelementptr i32, ptr addrspace(1) %3, i64 %381, !dbg !54
  %383 = shl i32 %361, 2, !dbg !55
  %384 = sext i32 %383 to i64, !dbg !55
  %385 = and i1 %234, %380, !dbg !42
  %gep70 = getelementptr i32, ptr addrspace(3) %84, i64 %384, !dbg !55
  %386 = select i1 %385, i32 4, i32 0, !dbg !55
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %gep70, ptr addrspace(1) %382, i32 %386, i1 %86) #1, !dbg !55
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !55
  %387 = mul i32 %376, %6, !dbg !56
  %388 = add i32 %387, %40, !dbg !57
  %389 = and i1 %41, %379, !dbg !58
  %390 = sext i32 %388 to i64, !dbg !59
  %391 = getelementptr half, ptr addrspace(1) %4, i64 %390, !dbg !59
  %392 = shl i32 %361, 5, !dbg !60
  %393 = sext i32 %392 to i64, !dbg !60
  %394 = and i1 %234, %389, !dbg !42
  %gep72 = getelementptr half, ptr addrspace(3) %95, i64 %393, !dbg !60
  %395 = select i1 %394, i32 16, i32 0, !dbg !60
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep72, ptr addrspace(1) %391, i32 %395, i1 %86) #1, !dbg !60
  tail call void @llvm.nvvm.cp.async.commit.group(), !dbg !60
  %396 = add nuw nsw i32 %233, 1, !dbg !42
  %exitcond.not = icmp eq i32 %396, %54, !dbg !42
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %222, !dbg !42

._crit_edge.loopexit:                             ; preds = %222
  %397 = bitcast half %347 to i16, !dbg !73
  %398 = bitcast half %348 to i16, !dbg !73
  %399 = bitcast half %349 to i16, !dbg !73
  %400 = bitcast half %350 to i16, !dbg !73
  %401 = bitcast half %351 to i16, !dbg !73
  %402 = bitcast half %352 to i16, !dbg !73
  %403 = bitcast half %353 to i16, !dbg !73
  %404 = bitcast half %354 to i16, !dbg !73
  br label %._crit_edge, !dbg !28

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %10
  %405 = phi i16 [ 0, %10 ], [ %397, %._crit_edge.loopexit ]
  %406 = phi i16 [ 0, %10 ], [ %398, %._crit_edge.loopexit ]
  %407 = phi i16 [ 0, %10 ], [ %399, %._crit_edge.loopexit ]
  %408 = phi i16 [ 0, %10 ], [ %400, %._crit_edge.loopexit ]
  %409 = phi i16 [ 0, %10 ], [ %401, %._crit_edge.loopexit ]
  %410 = phi i16 [ 0, %10 ], [ %402, %._crit_edge.loopexit ]
  %411 = phi i16 [ 0, %10 ], [ %403, %._crit_edge.loopexit ]
  %412 = phi i16 [ 0, %10 ], [ %404, %._crit_edge.loopexit ]
  %413 = or disjoint i32 %40, 6, !dbg !28
  %414 = or disjoint i32 %40, 4, !dbg !28
  %415 = or disjoint i32 %40, 2, !dbg !28
  tail call void @llvm.nvvm.cp.async.wait.group(i32 0), !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %416 = mul i32 %33, %6, !dbg !74
  %417 = sext i32 %416 to i64, !dbg !75
  %418 = getelementptr half, ptr addrspace(1) %2, i64 %417, !dbg !75
  %419 = sext i32 %40 to i64, !dbg !76
  %420 = getelementptr half, ptr addrspace(1) %418, i64 %419, !dbg !76
  %421 = sext i32 %415 to i64, !dbg !76
  %422 = getelementptr half, ptr addrspace(1) %418, i64 %421, !dbg !76
  %423 = sext i32 %414 to i64, !dbg !76
  %424 = getelementptr half, ptr addrspace(1) %418, i64 %423, !dbg !76
  %425 = sext i32 %413 to i64, !dbg !76
  %426 = getelementptr half, ptr addrspace(1) %418, i64 %425, !dbg !76
  %427 = and i1 %34, %41, !dbg !77
  %428 = shl i32 %17, 1, !dbg !73
  %429 = and i32 %428, 6, !dbg !73
  %430 = shl nuw nsw i32 %20, 3, !dbg !73
  %431 = shl nuw nsw i32 %21, 3, !dbg !73
  %432 = shl nuw nsw i32 %22, 3, !dbg !73
  %433 = or disjoint i32 %430, %429, !dbg !73
  %434 = or disjoint i32 %433, %431, !dbg !73
  %435 = or disjoint i32 %434, %432, !dbg !73
  %436 = or disjoint i32 %435, %25, !dbg !73
  %437 = shl i32 %17, 3, !dbg !73
  %438 = and i32 %437, 512, !dbg !73
  %439 = xor i32 %436, %438, !dbg !73
  %440 = and i32 %31, 768, !dbg !73
  %441 = or disjoint i32 %430, %440, !dbg !73
  %442 = or disjoint i32 %441, %431, !dbg !73
  %443 = or disjoint i32 %442, %432, !dbg !73
  %444 = or disjoint i32 %443, %32, !dbg !73
  %445 = lshr i32 %439, 2, !dbg !73
  %446 = and i32 %445, 1073741816, !dbg !73
  %447 = add nuw nsw i32 %446, %439, !dbg !73
  %448 = zext nneg i32 %447 to i64, !dbg !73
  %449 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %448, !dbg !73
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %449, i16 %405, i16 %406, i1 true) #1, !dbg !73
  %450 = xor i32 %439, 256, !dbg !73
  %451 = lshr i32 %450, 2, !dbg !73
  %452 = and i32 %451, 1073741816, !dbg !73
  %453 = add nuw nsw i32 %452, %450, !dbg !73
  %454 = zext nneg i32 %453 to i64, !dbg !73
  %455 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %454, !dbg !73
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %455, i16 %407, i16 %408, i1 true) #1, !dbg !73
  %456 = xor i32 %439, 16, !dbg !73
  %457 = add nuw nsw i32 %446, %456, !dbg !73
  %458 = zext nneg i32 %457 to i64, !dbg !73
  %459 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %458, !dbg !73
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %459, i16 %409, i16 %410, i1 true) #1, !dbg !73
  %460 = xor i32 %439, 272, !dbg !73
  %461 = lshr i32 %460, 2, !dbg !73
  %462 = and i32 %461, 1073741816, !dbg !73
  %463 = add nuw nsw i32 %462, %460, !dbg !73
  %464 = zext nneg i32 %463 to i64, !dbg !73
  %465 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %464, !dbg !73
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %465, i16 %411, i16 %412, i1 true) #1, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %466 = lshr exact i32 %443, 2, !dbg !73
  %467 = and i32 %466, 536870904, !dbg !73
  %468 = add nuw nsw i32 %467, %444, !dbg !73
  %469 = zext nneg i32 %468 to i64, !dbg !73
  %470 = getelementptr inbounds nuw half, ptr addrspace(3) @global_smem, i64 %469, !dbg !73
  %471 = load <8 x half>, ptr addrspace(3) %470, align 16, !dbg !73
  %472 = shufflevector <8 x half> %471, <8 x half> poison, <2 x i32> <i32 0, i32 1>, !dbg !73
  %473 = tail call <2 x half> asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.noftz.f16x2 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %420, <2 x half> %472, i1 %427) #1, !dbg !73
  %474 = shufflevector <8 x half> %471, <8 x half> poison, <2 x i32> <i32 2, i32 3>, !dbg !73
  %475 = tail call <2 x half> asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.noftz.f16x2 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %422, <2 x half> %474, i1 %427) #1, !dbg !73
  %476 = shufflevector <8 x half> %471, <8 x half> poison, <2 x i32> <i32 4, i32 5>, !dbg !73
  %477 = tail call <2 x half> asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.noftz.f16x2 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %424, <2 x half> %476, i1 %427) #1, !dbg !73
  %478 = shufflevector <8 x half> %471, <8 x half> poison, <2 x i32> <i32 6, i32 7>, !dbg !73
  %479 = tail call <2 x half> asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.acq_rel.add.noftz.f16x2 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %426, <2 x half> %478, i1 %427) #1, !dbg !73
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.commit.group() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.wait.group(i32 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }
attributes #2 = { convergent nocallback nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "gemm.py", directory: "/home/kdog/text-generation-webui/venv/lib/python3.10/site-packages/awq/modules/triton")
!4 = !{ptr @awq_gemm_kernel, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "awq_gemm_kernel", linkageName: "awq_gemm_kernel", scope: !3, file: !3, line: 128, type: !7, scopeLine: 128, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 143, column: 24, scope: !6)
!10 = !DILocation(line: 144, column: 26, scope: !6)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !6, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/kdog/text-generation-webui/venv/lib/python3.10/site-packages/triton/language")
!14 = !DILocation(line: 148, column: 27, scope: !6)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 150, column: 19, scope: !6)
!17 = !DILocation(line: 151, column: 18, scope: !6)
!18 = !DILocation(line: 166, column: 54, scope: !6)
!19 = !DILocation(line: 175, column: 25, scope: !6)
!20 = !DILocation(line: 175, column: 53, scope: !6)
!21 = !DILocation(line: 175, column: 40, scope: !6)
!22 = !DILocation(line: 176, column: 28, scope: !6)
!23 = !DILocation(line: 178, column: 26, scope: !6)
!24 = !DILocation(line: 178, column: 47, scope: !6)
!25 = !DILocation(line: 179, column: 33, scope: !6)
!26 = !DILocation(line: 179, column: 28, scope: !6)
!27 = !DILocation(line: 184, column: 25, scope: !6)
!28 = !DILocation(line: 184, column: 40, scope: !6)
!29 = !DILocation(line: 185, column: 28, scope: !6)
!30 = !DILocation(line: 187, column: 24, scope: !6)
!31 = !DILocation(line: 187, column: 39, scope: !6)
!32 = !DILocation(line: 188, column: 20, scope: !6)
!33 = !DILocation(line: 188, column: 42, scope: !6)
!34 = !DILocation(line: 189, column: 27, scope: !6)
!35 = !DILocation(line: 189, column: 48, scope: !6)
!36 = !DILocation(line: 191, column: 21, scope: !6)
!37 = !DILocation(line: 192, column: 21, scope: !6)
!38 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !39)
!39 = !DILocation(line: 197, column: 33, scope: !6)
!40 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !39)
!41 = !DILocation(line: 239, column: 44, scope: !6)
!42 = !DILocation(line: 197, column: 22, scope: !6)
!43 = !DILocation(line: 198, column: 30, scope: !6)
!44 = !DILocation(line: 199, column: 38, scope: !6)
!45 = !DILocation(line: 200, column: 20, scope: !6)
!46 = !DILocation(line: 202, column: 37, scope: !6)
!47 = !DILocation(line: 203, column: 20, scope: !6)
!48 = !DILocation(line: 211, column: 13, scope: !6)
!49 = !DILocation(line: 212, column: 31, scope: !6)
!50 = !DILocation(line: 212, column: 54, scope: !6)
!51 = !DILocation(line: 213, column: 38, scope: !6)
!52 = !DILocation(line: 213, column: 33, scope: !6)
!53 = !DILocation(line: 214, column: 38, scope: !6)
!54 = !DILocation(line: 215, column: 33, scope: !6)
!55 = !DILocation(line: 216, column: 24, scope: !6)
!56 = !DILocation(line: 222, column: 24, scope: !6)
!57 = !DILocation(line: 222, column: 47, scope: !6)
!58 = !DILocation(line: 224, column: 38, scope: !6)
!59 = !DILocation(line: 225, column: 35, scope: !6)
!60 = !DILocation(line: 226, column: 25, scope: !6)
!61 = !DILocation(line: 237, column: 21, scope: !6)
!62 = !DILocation(line: 238, column: 18, scope: !6)
!63 = !DILocation(line: 239, column: 18, scope: !6)
!64 = !DILocation(line: 210, column: 41, scope: !6)
!65 = !DILocation(line: 229, column: 18, scope: !6)
!66 = !DILocation(line: 230, column: 26, scope: !6)
!67 = !DILocation(line: 229, column: 28, scope: !6)
!68 = !DILocation(line: 230, column: 36, scope: !6)
!69 = !DILocation(line: 231, column: 17, scope: !6)
!70 = !DILocation(line: 231, column: 26, scope: !6)
!71 = !DILocation(line: 235, column: 35, scope: !6)
!72 = !DILocation(line: 210, column: 37, scope: !6)
!73 = !DILocation(line: 249, column: 30, scope: !6)
!74 = !DILocation(line: 244, column: 25, scope: !6)
!75 = !DILocation(line: 244, column: 21, scope: !6)
!76 = !DILocation(line: 244, column: 44, scope: !6)
!77 = !DILocation(line: 245, column: 39, scope: !6)
!78 = !DILocation(line: 246, column: 4, scope: !6)
